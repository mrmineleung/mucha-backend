name: FastAPI Docker Build and Push

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Login to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD-HHmmss
        utcOffset: "+08:00"

    - name: Build and push Docker image
      run: |
        docker buildx create --use
        docker buildx build \
          --file Dockerfile \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:latest \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:${{ steps.current-time.outputs.formattedTime }} \
          --push .

    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCE_PROJECT_ID }}
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          export_default_credentials: true

      - name: Access gcloud CLI
        run: |
          gcloud auth configure-docker

      # - name: Checkout repository
      #   uses: actions/checkout@v3

      # - name: scp into GCP instance
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.GCE_INSTANCE_IP_STAGING }}
      #     username: ${{ secrets.GCE_SSH_USERNAME }}
      #     key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
      #     source: "docker-compose.yml"
      #     target: "/home/${{ secrets.GCE_SSH_USERNAME }}/"

      - name: SSH into GCP instance and deploy FastAPI
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: ${{ secrets.GCE_SSH_USERNAME }}
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          script: |
            docker run -t -i -d -p 80:80 -p 443:443 --env-file ./env --restart=always ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:${{ env.timestamp }}
            docker image prune -f
